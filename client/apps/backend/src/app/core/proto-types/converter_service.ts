// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: converter_service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { HelloReply, HelloRequest } from "./converter_messages";

export const protobufPackage = "converter";

export const CONVERTER_PACKAGE_NAME = "converter";

export interface ConverterServiceClient {
  sayHello(request: HelloRequest): Observable<HelloReply>;
}

export interface ConverterServiceController {
  sayHello(request: HelloRequest): Promise<HelloReply> | Observable<HelloReply> | HelloReply;
}

export function ConverterServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sayHello"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ConverterService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ConverterService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONVERTER_SERVICE_NAME = "ConverterService";
